{
    "2c4fac3f-2816-4161-bb19-6503a16bc15c": {
        "Prototype": "addToArray(arr,sVal)",
        "Description": "Adds value to array.  This CSF takes an existing array, adds an additional element and enters the provided value into the new element.",
        "Body": "var l = 0;\nif ( arr != null ){\n  l = arr.length + 1;\n}\narr[l] = sVal;\n\nreturn arr;"
    },
    "f5d53b6b-3b13-4281-b7af-2b26704e4c31": {
        "Prototype": "AgeAtGivenDate(sDOB,sDate)",
        "Description": "calculates age",
        "Body": "var dtDOB = new Date(sDOB);\nvar dtDate = new Date(sDate);\nvar intAge;\nintAge = dtDate.getFullYear() - dtDOB.getFullYear();\ndtDOB.setYear(dtDate.getFullYear())\ndtDOB.setHours(0, 0, 0, 0);\ndtDate.setHours(0, 0, 0, 0);\nif (dtDate < dtDOB) \n{ intAge --; }\nreturn intAge;"
    },
    "1a0d7829-14f1-48ba-8601-14915b3d9e56": {
        "Prototype": "AgeInMonths(vDOB,vICDT)",
        "Description": "This function return numerical value for subject's age in months. Comparison usually done against Inform Consent date. Full dates are required, if dates are not valid returns -1",
        "Body": "var vAgeMonths = 0;\nvar vDT1 = new Date(vDOB);\nvar vYR1 = vDT1.getFullYear();\nvar vMN1 = vDT1.getMonth();\nvar vDY1 = vDT1.getDate();\n\nvar vDT2 = new Date(vICDT);\nvar vYR2 = vDT2.getFullYear();\nvar vMN2 = vDT2.getMonth();\nvar vDY2 = vDT2.getDate();\n\nif ( ( vYR1 > vYR2 ) || (vYR1 == vYR2 && vMN1 > vMN2 ) || ( vYR1 == vYR2 && vMN1 == vMN2 && vDY1 > vDY2 ) ){\n vAgeMonths = -1;\n} else {\n vAgeMonths = ( ( vYR2 - vYR1 ) * 12 );\n vAgeMonths+= ( vMN2 - vMN1 );\n if ( vDY2 < vDY1 ){\n  vAgeMonths--;\n }\n}\n \nreturn vAgeMonths;"
    },
    "9e2cfea7-b9cf-41ae-ad5e-9d99315bf22d": {
        "Prototype": "arrayAllNos(arr)",
        "Description": "Examines an Array of strings, returns false if any 'Yes' (Y) answers are included",
        "Body": "var ret = true;\nfor ( var i = 0; i < arr.length; i++ ){\n  if ( arr[i] == 'Y' ){\n    ret =  false;\n  }\n}\nreturn ret;"
    },
    "cc6f638b-f82c-491e-9a71-1253690887aa": {
        "Prototype": "arrayAllYess(arr)",
        "Description": "Examines an Array of strings, returns false if any 'No' (N) answers are included",
        "Body": "var ret = true;\nfor ( var i = 0; i < arr.length; i++ ){\n  if ( arr[i] == 0 ){\n    ret =  false;\n  }\n}\nreturn ret;"
    },
    "2244c1d5-058d-4f9c-aca5-a1c4ff2c328c": {
        "Prototype": "ArrayMax(arr1)",
        "Description": "Checking for highest value in array",
        "Body": "var max = arr1[0];\nvar len = arr1.length;\nfor ( var i = 1; i < len; i++ ){\n  if (arr1[i] > max){\n    max = arr1[i];\n  }\n}\nreturn max;"
    },
    "d4854894-22a6-4499-86e2-2dfcfda1951a": {
        "Prototype": "ArrayMin(arr1)",
        "Description": "Checking for lowest value in array",
        "Body": "var min = arr1[0];\nvar len = arr1.length;\nfor (var i = 1; i < len; i++){\n  if (arr1[i] < min){\n    min = arr1[i];\n  }\n}\nreturn min;"
    },
    "0211e89c-d72a-406d-a92d-f32331144cea": {
        "Prototype": "convDatFormat(dt,fmt)",
        "Description": "\n          ",
        "Body": "var rDT = '';\nvar year;\nvar month;\nvar day;\nif ( dt!='' && dt!= null ){\n var sDate = dt;\n var mySplitResult = sDate.split(\"/\");\n if ( mySplitResult.length == 3 ){\n  year = mySplitResult[0];\n  month = mySplitResult[1];\n  day = mySplitResult[2];\n }\n var m;\n switch( month ){\n  case '01': m = 'JAN'; break;\n  case '02': m = 'FEB'; break;\n  case '03': m = 'MAR'; break;\n  case '04': m = 'APR'; break;\n  case '05': m = 'MAY'; break;\n  case '06': m = 'JUN'; break;\n  case '07': m = 'JUL'; break;\n  case '08': m = 'AUG'; break;\n  case '09': m = 'SEP'; break;\n  case '10': m = 'OCT'; break;\n  case '11': m = 'NOV'; break;\n  case '12': m = 'DEC'; break;\n }\n if ( fmt == 1 ){ rDT = day + '/' + month + '/' + year; }\n if ( fmt == 2 ){ rDT = day + '/' + m + '/' + year; }\n if ( fmt == 3 ){ rDT = year+'/'+month+'/'+day; }\n}\nreturn rDT;"
    },
    "3c83df19-5370-4d7b-9b23-5845c8b346e1": {
        "Prototype": "DaysBetween(earlierdate,laterdate)",
        "Description": "Calculates days between two dates",
        "Body": "if (earlierdate == '' || earlierdate == NULL || laterdate == '' || laterdate == NULL)\nreturn NaN;\nelse {\nvar date1=new Date(earlierdate);\nvar date2=new Date(laterdate);\nvar oneDay = 24*60*60*1000;\nvar diffDays = Math.round((date2 - date1)/(oneDay));\nreturn diffDays};"
    },
    "6f0c4f13-5768-4301-8f4f-bcf7ad83e6ba": {
        "Prototype": "IE_Duplicate(Arr,GIN)",
        "Description": "Returns true if duplicate values are NOT found in the array.",
        "Body": "for ( var j = GIN-1; j >= 0; j-- ){\n  if ( Arr[GIN-1] == Arr[j-1] && Arr[GIN-1] != '' ){\n   return false;\n  }\n}\n return true;"
    },
    "f9efa826-d51c-416a-a9f8-4c23aa8d8350": {
        "Prototype": "isDate1LDate2Partial(d1,d2)",
        "Description": "compares dates, fires if d1 is >=  d2 for partial entries without stop words",
        "Body": "if (d1 == \"\" || d1 == NULL || d1 == null || d2 == \"\" || d2 == NULL || d2 == null)\nreturn true;\n\nvar d1len = d1.length;\nvar d2len = d2.length;\n\nif (d1len == 10 && d2len == 10) //both are full dates\n{\nvar f1 = new Date(d1);\nvar f2 = new Date(d2);\nif (f1 < f2)\n{return true;}\nelse {return false;}\n}\nelse //partial date\n{\n  var dt1sub = d1 .split(\"/\");\n  var D1M = dt1sub[1];\n  var D1Y= dt1sub[0];\n  var dt2sub = d2 .split(\"/\");\n  var D2M = dt2sub[1];\n  var D2Y= dt2sub[0];\n\n  //if date is fully partial\n  if( D1Y== \"\" || D2Y== '')\n   {return true;}\n\n  if( d1len <= 6 || d2len <= 6) //only year is given for at least 1 date\n  if(Number(D1Y) >= Number(D2Y))\n  {return false;}\n  else\n  {return true;}\n else //month and year are given for both dates\n  {\n  if(Number(D1Y) > Number(D2Y))\n  {return false;}\n    if( Number(D1Y) == Number(D2Y))\n    {\n     if(Number(D1M) >= Number(D2M))\n     {return false;}\n    else {return true;}\n   }\n else {return true;}\n }\n}"
    },
    "cb43e575-8aff-4131-9091-25d5a6db5597": {
        "Prototype": "isDate1LEDate2Partial(d1,d2)",
        "Description": "compares dates, fires if d1 is >  d2 for partial entries without stop words",
        "Body": "if (d1 == \"\" || d1 == NULL || d1 == null || d2 == \"\" || d2 == NULL || d2 == null)\nreturn true;\n\nvar d1len = d1.length;\nvar d2len = d2.length;\n\nif (d1len == 10 && d2len == 10) //both are full dates\n{\nvar f1 = new Date(d1);\nvar f2 = new Date(d2);\nif (f1 <= f2)\n{return true;}\nelse {return false;}\n}\nelse //partial date\n{\n  var dt1sub = d1 .split(\"/\");\n  var D1M = dt1sub[1];\n  var D1Y= dt1sub[0];\n  var dt2sub = d2 .split(\"/\");\n  var D2M = dt2sub[1];\n  var D2Y= dt2sub[0];\n\n  //if date is fully partial\n  if( D1Y== \"\" || D2Y== '')\n   {return true;}\n\n  if( d1len <= 6 || d2len <= 6) //only year is given for at least 1 date\n  if(Number(D1Y) > Number(D2Y))\n  {return false;}\n  else\n  {return true;}\n else //month and year are given for both dates\n  {\n  if(Number(D1Y) > Number(D2Y))\n  {return false;}\n    if( Number(D1Y) == Number(D2Y))\n    {\n     if(Number(D1M) > Number(D2M))\n     {return false;}\n    else {return true;}\n   }\n else {return true;}\n }\n}"
    },
    "7151fc3f-013c-4939-80e0-6559fdb88971": {
        "Prototype": "isPartialDateNotInFuture(pDate)",
        "Description": "Used to test if partial dates containing the Stop Word UN are in the future. Needs to be adapted for other Stopwords",
        "Body": "if (pDate ==  \"\" || pDate == NULL )\n{return true;}\n\n\n\nif (pDate.indexOf(\"/\") == -1 || pDate.indexOf(\"/\") == pDate.lastIndexOf(\"/\") || \npDate.length == pDate.lastIndexOf(\"/\") + 1)\nreturn true;\n\n\nvar date = pDate.toUpperCase(); \nvar isDate = date.search(/UN/);\nvar todayDate = new Date();\nif (isDate == -1)\n{\n  var fulld = new Date (pDate);\n  if (fulld <= todayDate)\n    {return true;}\n  else\n    {return false;}\n}\nelse\n{\n  var todayMonth = todayDate.getMonth(); //getMonth counts from 0 to 11\n  var todayYear = todayDate.getYear();\n  var dtsub = date.split(\"/\");\n  var dateMonth = dtsub[1];\n  var dateYear = dtsub[0];\n  var mon = dateMonth.search(/UN/);\n\n  //if date is fully partial\n  if( dateYear.search(/UN/) != -1)\n   {return true;}\n\n  if( mon != -1)\n  //only year is given\n  {\n   if( Number(dateYear) > Number(todayYear))\n    {return false;}\n   else\n    {return true;}\n  }\n\n  else\n  //year and month are given\n  {\n    if( Number(dateYear) > Number(todayYear))\n     {return false;}\n\n    else if( Number(dateYear) == Number(todayYear))\n     {\n     if(Number(dateMonth) > (Number(todayMonth) + 1))\n      {return false;}\n     else\n      {return true;}\n     }\n    else\n     {return true;}\n  }\n}"
    },
    "0928b5b2-37cf-492f-a1aa-5b9e2804d16b": {
        "Prototype": "isPartialDatewithMonthandYear(pDate)",
        "Description": "Used to test if partial dates containing at least month and year. Day can be replaced by Stop Word UN (adapt for other Stop words if necessary)",
        "Body": "if (pDate ==  \"\" || pDate == NULL || pDate.indexOf(\"/\") == -1 || pDate.indexOf(\"/\") == pDate.lastIndexOf(\"/\") || pDate.length == pDate.lastIndexOf(\"/\") + 1)\nreturn true;\n\nvar uDate = pDate.toUpperCase();\nvar dtsub = uDate.split(\"/\");\nif (dtsub[0].search(/UN/) != -1 || dtsub[1].search(/UN/) != -1)\n   {return false;} \nelse\n   {return true;}\n  var todayMonth = pDate.getMonth(); //getMonth counts from 0 to 11\n  var todayYear = pDate.getYear();\n  var dtsub = pDate.split(\"/\");\n  var dateMonth = dtsub[1];\n  var dateYear = dtsub[0];\n  var mon = dateMonth.search(/UN/);\n\n  //if date is fully partial\n  if( dateYear.search(/UN/) != -1)\n   {return true;}\n\n  if( mon != -1)\n  //only year is given\n  {\n   if( Number(dateYear) > Number(todayYear))\n    {return false;}\n   else\n    {return true;}\n  }\n\n  else\n  //year and month are given\n  {\n    if( Number(dateYear) > Number(todayYear))\n     {return false;}\n\n    else if( Number(dateYear) == Number(todayYear))\n     {\n     if(Number(dateMonth) > (Number(todayMonth) + 1))\n      {return false;}\n     else\n      {return true;}\n     }\n    else\n     {return true;}\n  }"
    },
    "24ed7324-44bc-4106-82b9-f54deaa4631a": {
        "Prototype": "isPartialDatewithYear(pDate)",
        "Description": "Used to test if partial dates containing at least year. Day and month can be replaced by Stop Word UN (adapt for other Stop words if necessary)",
        "Body": "if (pDate ==  \"\" || pDate == NULL || pDate.indexOf(\"/\") == -1 || pDate.indexOf(\"/\") == pDate.lastIndexOf(\"/\") || pDate.length == pDate.lastIndexOf(\"/\") + 1)\nreturn true;\n\nvar uDate = pDate.toUpperCase();\nvar dtsub = uDate.split(\"/\");\nif (dtsub[0].search(/UN/) != -1)\n   {return false;} \nelse\n   {return true;}"
    },
    "040a334f-6c6b-4c0e-8462-de1445b5e70c": {
        "Prototype": "Return_Last_Date(arr)",
        "Description": "Returns the last calendar date from an array of dates.",
        "Body": "function DateCompare_UNK_prior(Dt1,Dt2){\nvar ret = false;\nvar year1;\nvar month1;\nvar day1;\n\nvar year2;\nvar month2;\nvar day2;\n\nvar sDate1 = Dt1;\nvar sDate2 = Dt2;\nif ( sDate1 == '' || sDate1 == null || sDate1 == NULL || sDate2 == '' || sDate2 == null || sDate2 == NULL|| sDate1.length < 10 || sDate2.length < 10 )\n ret = true;\nelse  {\n        var mySplitResult = sDate1.split(\"/\");\n        if ( mySplitResult.length == 3 ){\n          year1 = mySplitResult[0];\n          month1 = mySplitResult[1];\n          day1 = mySplitResult[2];\n        }\n        mySplitResult = sDate2.split(\"/\");\n        if ( mySplitResult.length == 3 ){\n          year2 = mySplitResult[0];\n          month2 = mySplitResult[1];\n          day2 = mySplitResult[2];\n        }\n        if ( year1.toUpperCase() == 'UNK' )\n            year1 = '1900';\n        if ( month1.toUpperCase() == 'UNK' )\n          month1 = '01';\n        if ( day1.toUpperCase() == 'UNK' )\n          day1 = '01';\n//assign the value of start year if end year is UNK\n        if ( year2.toUpperCase() == 'UNK' )\n           year2 = '1900';\n//assign the value of start month if end month is UNK\n        if ( month2.toUpperCase() == 'UNK' )\n           month2 = '01';\n//assign the value of start day if end day is UNK\n        if ( day2.toUpperCase() == 'UNK' )\n          day2 = '01';\n        var Date1 = new Date( year1, month1-1, day1, 0, 0, 0);\n        var Date2 = new Date( year2, month2-1, day2, 0, 0, 0);\n\n//Compare the dates and return true if date2 is >= date1\n  if ( Date2 > Date1 )\n    ret = true;\n}\n\nreturn ret;\n}\n\nfunction isEmpty(val1){\n return ( val1 == null || val1 == '' || val1 == NULL );\n}\n\n\nvar dt = '1900/01/01';\nfor ( var i = 0; i < arr.length; i++ ){\n if ( !isEmpty(arr[i]) && DateCompare_UNK_prior(dt, arr[i]) ){\n  dt = arr[i];\n }\n}\n\nreturn dt;"
    },
    "045ef668-75ce-41b7-b67e-9069f1df0c99": {
        "Prototype": "ReturnEntryAtPosition(arr,int)",
        "Description": "\n          ",
        "Body": "if (arr == '' || arr == null || arr == NULL)\n    return '';\nelse {\n    return arr[int];\n}"
    },
    "fc13b3fb-b399-4b6f-8687-52894bf5c5a4": {
        "Prototype": "zeroPad(num,count)",
        "Description": "Adding padding zeros to subject number. For example, subject \"1\" will be \"01\"",
        "Body": "var numZeropad = num.toString() + '';\nwhile ( numZeropad.length < count ){\n  numZeropad = '0' + numZeropad;\n}\nreturn numZeropad;"
    },
    "6fc998c7-6cde-4e78-8c06-99a0142eb838": {
        "Prototype": "ReturnDateForCaption(dt)",
        "Description": "\n          ",
        "Body": "//Code:\nvar monstr = new Array(\"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\",\n                      \"JUL\", \"AUG\", \"SEP\", \"OCT\", \"NOV\", \"DEC\");\nif(dt == NULL || dt == '')\nreturn '';\n\nvar fdate;\nvar formname;\n\nvar mySplitRes = dt.split(\"/\");\nvar month = mySplitRes[1];\nvar day = mySplitRes[2];\nvar year = mySplitRes[0];\n\nif (month != '' && month != 'UN')\n{\nmonth = Number(month)-1;\nvar month1 = monstr[month];\n}\nelse \nvar month1 = month;\n\nif (dt == \"\")\nfdate = '';\nelse\nfdate = day + '/' + month1 + '/'  + year;"
    },
    "a77ba964-686f-4223-b7a5-559a1548bae6": {
        "Prototype": "ToDate(dates)",
        "Description": "\n          ",
        "Body": "var str = dates;\nvar x = str.split(\"/\");\nvar strD = x[0];\nvar strM = x[1];\nvar strY = x[2];\n//var dt = new Date(strY, strM-1, strD);\nif (strY.length == 4)\n    return strY+ '/' + strM + '/' +strD;\nelse\n    return dates;"
    },
    "59d0eee3-1409-41ba-8a62-428970a897bc": {
        "Prototype": "isDate1LEDate2(d1,d2)",
        "Description": "\n          ",
        "Body": "if (d1 == \"\" || d2 == \"\")\nreturn true;\nvar iD1 = d1.search(/UN/);\nvar iD2 = d2.search(/UN/);\nif (iD1 == -1 && iD2 == -1)\n{\nvar f1 = new Date(d1);\nvar f2 = new Date(d2);\nif (f1 <= f2)\n{return true;}\nelse {return false;}\n} var s1 = d1.split(\"/\");\nvar s2 = d2.split(\"/\");\nvar D1Y = s1[0];\nvar D1M = s1[1];\nvar D1D = s1[2];\nvar D2Y = s2[0];\nvar D2M = s2[1];\nvar D2D = s2[2];\nif( D1Y == \"UN\" || D2Y == \"UN\")\nreturn true;\nif(D1M == \"UN\" || D2M == \"UN\")\n{\nif(Number(D1Y) > Number(D2Y))\n{return false;}\nelse\n{return true;}\n}\nelse\n{\nif(Number(D1Y) > Number(D2Y))\n{return false;}\nif( Number(D1Y) == Number(D2Y))\n{\nif(Number(D1M) > Number(D2M))\n{return false;}\nelse {return true;}\n}\nelse {return true;}\n}"
    },
    "99570004-5caa-4db1-8359-771600328dcb": {
        "Prototype": "GetArray(arg,num)",
        "Description": "\n          ",
        "Body": "if (arg!='' && num != \"\"  )\nreturn arg[num];\nelse\nreturn '';"
    },
    "dd88a3b8-55f8-44b7-8c4d-3501241de2e9": {
        "Prototype": "ArraySum(arg)",
        "Description": "\n          ",
        "Body": "var sum = 0;\nvar len = arg.length;\nfor ( var i = 0; i < len; i++ ){\nsum = Number(arg[i]) +Number(sum)  \n}\nreturn sum ;"
    },
    "ed2ad696-bbed-4bd1-8220-e229d7d2327c": {
        "Prototype": "isEmpty(val1)",
        "Description": "Checking if value is empty",
        "Body": "return ( val1 == null || val1 == '' || val1 == NULL );"
    },
    "7d5f0f0d-29ff-4940-ac66-821903244750": {
        "Prototype": "TodayDate(dummy)",
        "Description": "Returns the date of the current day",
        "Body": "var d = new Date();\nvar day = d.getDate();\nvar month = d.getMonth()+1;\n// les mois vont de 0 (janvier) \u00e0 11 (d\u00e9cembre) dans JavaScript\nvar year = d.getFullYear();\n\nif (day < 10)\n    day = '0' + day;\n\nif (month < 10)\n    month = '0' + month;\n\nd = year + '/' + month + '/' + day;\nreturn d;"
    },
    "2ccc6407-bb69-4ed9-8dca-4b15ac6020d7": {
        "Prototype": "ArrayMaxDAte(arr1)",
        "Description": "\n          ",
        "Body": "var max = arr1[0];\nvar len = arr1.length;\nfor ( var i = 1; i < len; i++ ){\n  if ( isDate1LEDate2(max,arr1[i]) ){\n    max = arr1[i];\n  }\n}\nreturn max;\n\n\n\nfunction isDate1LEDate2(d1,d2) {\nif (d1 == \"\" || d2 == \"\")\nreturn true;\nvar iD1 = d1.search(/UN/);\nvar iD2 = d2.search(/UN/);\nif (iD1 == -1 && iD2 == -1)\n{\nvar f1 = new Date(d1);\nvar f2 = new Date(d2);\nif (f1 <= f2)\n{return true;}\nelse {return false;}\n} var s1 = d1.split(\"/\");\nvar s2 = d2.split(\"/\");\nvar D1Y = s1[0];\nvar D1M = s1[1];\nvar D1D = s1[2];\nvar D2Y = s2[0];\nvar D2M = s2[1];\nvar D2D = s2[2];\nif( D1Y == \"UN\" || D2Y == \"UN\")\nreturn true;\nif(D1M == \"UN\" || D2M == \"UN\")\n{\nif(Number(D1Y) > Number(D2Y))\n{return false;}\nelse\n{return true;}\n}\nelse\n{\nif(Number(D1Y) > Number(D2Y))\n{return false;}\nif( Number(D1Y) == Number(D2Y))\n{\nif(Number(D1M) > Number(D2M))\n{return false;}\nelse {return true;}\n}\nelse {return true;}\n}}"
    },
    "e4898992-21e1-4f08-b875-879d0b593e4a": {
        "Prototype": "isNumeric(arg)",
        "Description": "\n          ",
        "Body": "return arg.isnumeric;"
    },
    "a92d06b1-a785-499a-b6ca-041af17a1da5": {
        "Prototype": "FindMostRecentDate(array)",
        "Description": "Returns the most recent date in an array of dates",
        "Body": "var dtmax = array[0];\nvar len = array.length;\nvar i = 1;\n\nfunction isDate1LEDate2(d1,d2) {\nif (d1 == \"\" || d2 == \"\")\nreturn true;\nvar iD1 = d1.search(/UN/);\nvar iD2 = d2.search(/UN/);\nif (iD1 == -1 && iD2 == -1)\n{\nvar f1 = new Date(d1);\nvar f2 = new Date(d2);\nif (f1 <= f2)\n{return true;}\nelse {return false;}\n} var s1 = d1.split(\"/\");\nvar s2 = d2.split(\"/\");\nvar D1Y = s1[0];\nvar D1M = s1[1];\nvar D1D = s1[2];\nvar D2Y = s2[0];\nvar D2M = s2[1];\nvar D2D = s2[2];\nif( D1Y == \"UN\" || D2Y == \"UN\")\nreturn true;\nif(D1M == \"UN\" || D2M == \"UN\")\n{\nif(Number(D1Y) > Number(D2Y))\n{return false;}\nelse\n{return true;}\n}\nelse\n{\nif(Number(D1Y) > Number(D2Y))\n{return false;}\nif( Number(D1Y) == Number(D2Y))\n{\nif(Number(D1M) > Number(D2M))\n{return false;}\nelse {return true;}\n}\nelse {return true;}\n}\n}\n\n\nfor (i; i < len; i++){\n  if (!isDate1LEDate2(array[i],dtmax)) {\n     dtmax = array[i];\n  }\n}\nreturn dtmax;"
    },
    "a127d256-f3d7-4647-98a2-fa5e2110a415": {
        "Prototype": "DateFr(date)",
        "Description": "Returns the date on the format 'dd/mm/yyyy'",
        "Body": "var year = date.substring(0,4);\nvar month= date.substring(5,7);\nvar day = date.substring(8,10);\nvar datec = day + '/' + month + '/' + year;\n\nreturn datec;"
    },
    "ed3af8d8-ef27-487d-924b-540b8dd642b6": {
        "Prototype": "NombreDeDecimales(n)",
        "Description": "Renvoie le nombre de d\u00e9cimales saisies dans un nombre r\u00e9el",
        "Body": "if (isNaN(n))\n    return NaN;\n    \nif (Math.floor(n) != n)\n    return n.toString().split(\".\")[1].length;\nelse\n    return 0;"
    },
    "e1b363ff-a5dc-481e-b3d8-96d6349c1b2f": {
        "Prototype": "GetObjDate(date,objet)",
        "Description": "Get one object of a date (the day, the month or the year)",
        "Body": "var d = date.split(\"/\");\nvar year = d[0];\nvar month = d[1];\nvar day = d[2];\n\n//objet peut prendre 3 valeurs : \n//\"d\" si on veut r\u00e9cup\u00e9rer le jour\n//\"m\" si on veut r\u00e9cup\u00e9rer le mois\n//\"y\" si on veut r\u00e9cup\u00e9rer l'ann\u00e9e\nif (objet == 'd')\n    return day;\nif (objet == 'm')\n    return month;\nif (objet == 'y')\n    return year;"
    },
    "89def67f-8fcc-4108-bd5d-ef101a98e314": {
        "Prototype": "DeleteNullInArray(arr)",
        "Description": "Delete empty entries in array",
        "Body": "if (arr == '')\n{return '';}\n \nvar test = new Array();\n \nfor(var i = 0; i < arr.length; i++)\nif(arr[i] != '' && arr[i] != null && arr[i] != NULL)\n{test.push(arr[i]);}\n \nreturn test;"
    },
    "375f62a1-9539-4a66-8c1d-6676b2491954": {
        "Prototype": "SearchDecPoint(value)",
        "Description": "v\u00e9rifier si la variable contient un point",
        "Body": "var val = value.search(/\\./);\nif (val == '-1')\nreturn(true);\nelse\nreturn (false);"
    },
    "6dc38833-70a6-456b-8b49-1e9323a063f0": {
        "Prototype": "NotAnyNumberInString(value)",
        "Description": "\n          ",
        "Body": "var len = value.length;\nvar resp = true;\nvar i=0;\nwhile (i < len ) {\nvar car = value.substr(i,1);\nif ( !isNaN(car) && car != ' ')  resp = false;\ni=i+1;\n}\n\nreturn resp;"
    },
    "a7276bef-6f46-4603-816d-86762cf74955": {
        "Prototype": "roud(Nombre,decimales)",
        "Description": "arrondir",
        "Body": "var temporaire1 = Nombre/decimales;\n   var temporaire2 = Math.round(temporaire1);\n   var temporaire3 = temporaire2 *decimales;\nreturn temporaire3;"
    },
    "bbd383ac-9f33-4bd9-90a7-4c1abb1f86f1": {
        "Prototype": "GetNextNumber(level)",
        "Description": "Retrieves the next number based on a value entered. Allows the incrementing of forms, visits, etc.",
        "Body": "return \"/EX@FN/001\" + level;"
    },
    "d4a1f575-7aad-40f1-8020-debc82794ece": {
        "Prototype": "GetNextNumberFromTable(templateName,key1,key2,key3,key4,key5,key6,key7,key8,key9,key10)",
        "Description": "Grabs the next number available from a user-created Unique Numbering Table. Primarily used for randomization.",
        "Body": "return \"/EX@FN/002\"+templateName+\"/SEP/\"+(key1==null?\"\":(key1+\"/SEP/\"))+(key2==null?\"\":(key2+\"/SEP/\"))+(key3==null?\"\":(key3+\"/SEP/\"))+(key4==null?\"\":(key4+\"/SEP/\"))+(key5==null?\"\":(key5+\"/SEP/\"))+(key6==null?\"\":(key6+\"/SEP/\"))+(key7==null?\"\":(key7+\"/SEP/\"))+(key8==null?\"\":(key8+\"/SEP/\"))+(key9==null?\"\":(key9+\"/SEP/\"))+(key10==null?\"\":(key10+\"/SEP/\"))+\"/END/\";"
    },
    "9d9df004-3f12-4a82-93bb-4eaacc1cb2a4": {
        "Prototype": "AddDaysToDate(date,numDay)",
        "Description": "Calculates a new future date based on a date entered. Used to schedule new visits, for example.",
        "Body": "var retDT = ''; if (!(date==null || date=='' || date==NULL)) { var d = new Date(date); d.setDate(d.getDate()+Number(numDay)); retDT = d.getFullYear() + '/' + (d.getMonth()+1 < 10 ? '0' : '') + (d.getMonth()+1).toString() + '/' + (d.getDate() < 10 ? '0' : '') + (d.getDate()).toString(); if (retDT=='NaN/NaN/NaN') return '';} return retDT;"
    },
    "7049ae9c-a595-4626-9bae-fb7aab91d89d": {
        "Prototype": "CheckLabsRange(minValue,maxValue,labResult)",
        "Description": "Compares a lab result to an allowable range, and flags results that are out of range.",
        "Body": "if(labResult < minValue) return -1; if(minValue <= labResult && maxValue >= labResult) return 0; if(labResult > maxValue) return 1;"
    },
    "d173b84a-da1d-4cb2-a6b4-59db850414d7": {
        "Prototype": "GetCustomValueFromTable(templateName,columnName,keyQuestion)",
        "Description": "Grabs a specific value from a user-created Unique Numbering Table, based on data entered by the user.",
        "Body": "return \"/EX@FN/005\"+templateName+\"/SEP/\"+columnName+\"/SEP/\"+keyQuestion+\"/END/\";"
    },
    "bc2a8af1-1054-4c4b-bf93-e37b4c140e43": {
        "Prototype": "OMCMGetYear(@DataValue nvarchar(4000)) RETURNS smallint",
        "Description": "Get Year from TrialMaster date",
        "Body": "DECLARE @retVal nvarchar(4)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex('/', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex('/', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 1\nEND\nIF LEN(@retVal) = 4 AND ISNUMERIC(@retVal) = 1 \n\tRETURN @retVal\nRETURN null"
    },
    "3f98da0d-fbc1-4915-9c68-6e6987bc4fb7": {
        "Prototype": "OMCMGetMonth(@DataValue nvarchar(4000))RETURNS smallint",
        "Description": "Get Month from TrialMaster date",
        "Body": "DECLARE @retVal nvarchar(2)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex('/', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex('/', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 2\nEND\nIF LEN(@retVal) BETWEEN 1 AND 2 AND ISNUMERIC(@retVal) = 1\nBEGIN\n\tIF @retVal BETWEEN 1 AND 12\n\t\tRETURN @retVal\nEND\nRETURN null"
    },
    "2436ea25-e615-4961-ba4d-2dac0e9287a9": {
        "Prototype": "OMCMGetDay(@DataValue nvarchar(4000))RETURNS smallint",
        "Description": "Get Day from TrialMaster date",
        "Body": "DECLARE @retVal nvarchar(2)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex('/', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex('/', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 3\nEND\nIF LEN(@retVal) BETWEEN 1 AND 2 AND ISNUMERIC(@retVal) = 1\nBEGIN\n\tIF @retVal BETWEEN 1 AND 31\n\t\tRETURN @retVal\nEND\nRETURN null"
    },
    "209e47d3-9cb6-47e7-a66e-3537a94a56bc": {
        "Prototype": "OMCMGetHour(@DataValue nvarchar(4000))RETURNS smallint",
        "Description": "Get Hour from TrialMaster time",
        "Body": "DECLARE @retVal nvarchar(2)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex(':', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex(':', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 1\nEND\nIF LEN(@retVal) BETWEEN 1 AND 2 AND ISNUMERIC(@retVal) = 1\nBEGIN\n\tIF @retVal BETWEEN 0 AND 23\n\t\tRETURN @retVal\nEND\nRETURN null"
    },
    "63cab1d0-c19b-4e2b-be04-ba5497f0f604": {
        "Prototype": "OMCMGetMinute(@DataValue nvarchar(4000))RETURNS smallint",
        "Description": "Get Minute from TrialMaster time",
        "Body": "DECLARE @retVal nvarchar(2)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex(':', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex(':', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 2\nEND\nIF LEN(@retVal) BETWEEN 1 AND 2 AND ISNUMERIC(@retVal) = 1\nBEGIN\n\tIF @retVal BETWEEN 0 AND 59\n\t\tRETURN @retVal\nEND\nRETURN null"
    },
    "9d3819e9-37f1-4d48-bd1a-154073816895": {
        "Prototype": "OMCMGetSecond(@DataValue nvarchar(4000))RETURNS smallint",
        "Description": "Get Second from TrialMaster time",
        "Body": "DECLARE @retVal nvarchar(2)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex(':', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex(':', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 3\nEND\nIF LEN(@retVal) BETWEEN 1 AND 2 AND ISNUMERIC(@retVal) = 1\nBEGIN\n\tIF @retVal BETWEEN 0 AND 59\n\t\tRETURN @retVal\nEND\nRETURN null"
    },
    "60af88fb-d75e-4750-b90a-6fd80d5bb80b": {
        "Prototype": "OMCMDate9 ( @date varchar(20) ) RETURNS int",
        "Description": "Get date in SAS format.",
        "Body": "DECLARE @retval int; if isdate(@date)=1 begin SET @retval = datediff(day,'19600101',convert(datetime,@date,111)); end else begin SET @retval = null end RETURN @retval;"
    },
    "521bcc9b-0c80-45bd-8c23-40ca5c53e90d": {
        "Prototype": "OMCMTime8 ( @time varchar(20) ) RETURNS int",
        "Description": "Get time in SAS format for variables of control type HourMinuteSecond",
        "Body": "DECLARE @retval int; \n\tif isdate(@time)=1 \n\t\tBEGIN \n\t\t\tSET @retval = convert(int,substring(@time,1,2))*3600 +convert(int,substring(@time,4,2))*60 + convert(int,substring(@time,7,2));\n\t\tEND\n\telse\n\t\tBEGIN\n\t\t\tSET @retval = null;\n\t\tEND\nRETURN @retval;"
    },
    "5f38aa13-6acb-4840-8263-f062f1e9469d": {
        "Prototype": "OMCMTime5 ( @time varchar(20) ) RETURNS int",
        "Description": "Get time in SAS format for variables of control type HourMinute",
        "Body": "DECLARE @retval int; \n\tif isdate(@time)=1 \n\t\tBEGIN \n\t\t\tif substring(@time,2,1) = ':'\n\t\t\t\tselect @time = concat( '0', @time) \n\t\t\tSET @retval = convert(int,substring(@time,1,2))*3600 +convert(int,substring(@time,4,2))*60; \n\t\tEND\n\telse\n\t\tBEGIN\n\t\t\tSET @retval = null;\n\t\tEND\nRETURN @retval;"
    },
    "ef1381a3-cb9f-4944-be26-13d2e4fd556a": {
        "Prototype": "OMCMISO8601Date (@Date VARCHAR(48)) RETURNS VARCHAR(10)",
        "Description": "Get date in ISO8601 format",
        "Body": "\n\tSET @Date = REPLACE(REPLACE(@Date, '---', '/NA/'),'-','/') -- if @date already in ISO format, replace dividers with stop words\n\t\n\tDECLARE @year nvarchar(4), @month nvarchar(2), @day nvarchar(2)\n\tDECLARE @datePart nvarchar(10)\n\n\tDECLARE @DateAndTimeParts TABLE (id INT IDENTITY(1,1) PRIMARY KEY, FixedValue NVARCHAR(50), IsStopWord bit default 0)\n\tDECLARE @StopWords TABLE (stopWord nvarchar(10))\n\n\t-- populate whe stop words are populated at the time of function generation\n\tINSERT INTO @StopWords(stopWord) VALUES ('UNK'),('NA')\n\n\t-- make sure there are two / characters in the date\n\tWHILE (LEN(@date)-LEN(REPLACE(@date,'/','')) < 2)\n\t\tSET @date = @date + '/'\n\n\t-- populate @DateAndTimeParts with date and time parts\n\tDECLARE @DXML AS XML = CAST(('<i>' + REPLACE(@date, '/', '</i><i>') + '</i>') AS XML)\n\tINSERT INTO @DateAndTimeParts (IsStopWord, FixedValue)\n\tSELECT \n\t\tCASE \n\t\t\tWHEN N.value('.', 'VARCHAR(10)')='' THEN 1\n\t\t\tWHEN s.stopWord IS NULL THEN 0 \n\t\t\tELSE 1 END,\n\t\t\tISNULL(NULLIF(N.value('.', 'VARCHAR(10)'),''),(SELECT TOP 1 stopWord FROM @StopWords))\n\tFROM @DXML.nodes('i') as T(N) \n\tLEFT OUTER JOIN @StopWords s ON s.stopWord = N.value('.', 'VARCHAR(10)')\n\n\t-- validate date parts: Replace invalid parts with empty('-') values\n\tUPDATE @DateAndTimeParts \n\tSET FixedValue = \n\t\tCASE \n\t\t\tWHEN (id = 1) AND (LEN(FixedValue) != 4 OR ISNUMERIC(FixedValue) != 1) THEN\t\t\t\t\t\t\t\t\t   '-'  --year\n\t\t\tWHEN (id = 2) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 12) THEN '-'\t--month\n\t\t\tWHEN (id = 3) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 31) THEN '-'\t--day\n\t\t\tELSE FixedValue \n\t\tEND\n\n\t-- the date is invalid in case one part is empty('-') and it's not a stop word\n\tIF(EXISTS(SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND IsStopWord = 0))\n\t\tGOTO INVALID_DATE\n\n\t-- delete trailing empty ('-') date and time values from @dateParts\n\tWHILE EXISTS (SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts))\n\t\tDELETE FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts)\n\n\t-- get day component\n\tSELECT @year = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 1\n\tSELECT @month = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 2\n\tSELECT @day = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 3\n\n\t-- validate day component if year, month and day present\n\tIF(@year IS NOT NULL AND @month IS NOT NULL AND @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, ((@year - 1900) * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is Feb.\n\tELSE IF (@month='02')\n\t\tBEGIN\n\t\t\tIF (@day NOT BETWEEN 1 AND 29)\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is not Feb.\n\tELSE IF(@month IS NOT NULL and @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, (1900 * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\tEND\n\n\tCONTINUE_PROC:\n\n\t-- set datePart\n\tSELECT @datePart = COALESCE(@datePart + '-', '') + FixedValue\n\tFROM @DateAndTimeParts\n\n\tRETURN @datePart\n\t\n\tINVALID_DATE:\n\t\tRETURN NULL\n"
    },
    "1bbd147c-b97a-491c-a7e5-86694cfb5320": {
        "Prototype": "OMCMISO8601Time (@Time VARCHAR(48)) RETURNS VARCHAR(8)",
        "Description": "Get time in ISO8601 format",
        "Body": "\n\tSET @Time = REPLACE(@Time,'-','NA') -- if @time already in ISO format, replace dividers with stop words\n\n\tDECLARE @timePart nvarchar(8)\n\n\tDECLARE @DateAndTimeParts TABLE (id INT IDENTITY(1,1) PRIMARY KEY, FixedValue NVARCHAR(50), IsStopWord bit default 0)\n\tDECLARE @StopWords TABLE (stopWord nvarchar(10))\n\n\t-- populate whe stop words are populated at the time of function generation\n\tINSERT INTO @StopWords(stopWord) VALUES ('UNK'),('NA')\n\n\t-- populate @DateAndTimeParts with date and time parts\n\tDECLARE @DXML AS XML = CAST(('<i>' + REPLACE(@time, ':', '</i><i>') + '</i>') AS XML)\n\tINSERT INTO @DateAndTimeParts (IsStopWord, FixedValue)\n\tSELECT \n\t\tCASE \n\t\t\tWHEN N.value('.', 'VARCHAR(10)')='' THEN 1\n\t\t\tWHEN s.stopWord IS NULL THEN 0 \n\t\t\tELSE 1 END,\n\t\t\tISNULL(NULLIF(N.value('.', 'VARCHAR(10)'),''),(SELECT TOP 1 stopWord FROM @StopWords))\n\tFROM @DXML.nodes('i') as T(N) \n\tLEFT OUTER JOIN @StopWords s ON s.stopWord = N.value('.', 'VARCHAR(10)')\n\n\t-- validate date parts: Replace invalid parts with empty('-') values\n\tUPDATE @DateAndTimeParts \n\tSET FixedValue = \n\t\tCASE \n\t\t\tWHEN (id = 1) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 23) THEN '-'\t--hours\n\t\t\tWHEN (id = 2) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'\t--minutes\n\t\t\tWHEN (id = 3) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'\t--seconds\n\t\t\tELSE FixedValue \n\t\tEND\n\n\t-- the date is invalid in case one part is empty('-') and it's not a stop word\n\tIF(EXISTS(SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND IsStopWord = 0))\n\t\tGOTO INVALID_DATE\n\n\t-- delete trailing empty ('-') date and time values from @dateParts\n\tWHILE EXISTS (SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts))\n\t\tDELETE FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts)\n\n\t-- set timePart\n\tSELECT @timePart = COALESCE(@timePart + ':', '') + FixedValue\n\tFROM @DateAndTimeParts\n\n\tRETURN @timePart\n\t\n\tINVALID_DATE:\n\t\tRETURN NULL\n"
    },
    "d1c021f0-5e1c-481d-83b7-982ac691eb5b": {
        "Prototype": "OMCMISO8601DateTime ( @date varchar(48), @time varchar(48) ) RETURNS varchar(19)",
        "Description": "Get DateTime in ISO8601 format",
        "Body": "\n\tSET @Date = REPLACE(REPLACE(@Date, '---', '/NA/'),'-','/') -- if @date already in ISO format, replace dividers with stop words\n\tSET @Time = REPLACE(@Time,'-','NA') -- if @time already in ISO format, replace dividers with stop words\n\n\tDECLARE @OMCMISODateTime nvarchar(19), @year nvarchar(4), @month nvarchar(2), @day nvarchar(2)\n\tDECLARE @datePart nvarchar(10), @timePart nvarchar(8)\n\n\tDECLARE @DateAndTimeParts TABLE (id INT IDENTITY(1,1) PRIMARY KEY, FixedValue NVARCHAR(50), IsStopWord bit default 0)\n\tDECLARE @StopWords TABLE (stopWord nvarchar(10))\n\n\t-- populate whe stop words are populated at the time of function generation\n\tINSERT INTO @StopWords(stopWord) VALUES ('UNK'),('NA')\n\n\t-- make sure there are two / characters in the date\n\tWHILE (LEN(@date)-LEN(REPLACE(@date,'/','')) < 2)\n\t\tSET @date = @date + '/'\n\n\t-- populate @DateAndTimeParts with date and time parts\n\tDECLARE @DXML AS XML = CAST(('<i>' + REPLACE(REPLACE(@date + '/' + @time, '/', '</i><i>'), ':', '</i><i>') + '</i>') AS XML)\n\tINSERT INTO @DateAndTimeParts (IsStopWord, FixedValue)\n\tSELECT \n\t\tCASE \n\t\t\tWHEN N.value('.', 'VARCHAR(10)')='' THEN 1\n\t\t\tWHEN s.stopWord IS NULL THEN 0 \n\t\t\tELSE 1 END,\n\t\t\tISNULL(NULLIF(N.value('.', 'VARCHAR(10)'),''),(SELECT TOP 1 stopWord FROM @StopWords))\n\tFROM @DXML.nodes('i') as T(N) \n\tLEFT OUTER JOIN @StopWords s ON s.stopWord = N.value('.', 'VARCHAR(10)')\n\n\t-- validate date parts: Replace invalid parts with empty('-') values\n\tUPDATE @DateAndTimeParts \n\tSET FixedValue = \n\t\tCASE \n\t\t\tWHEN (id = 1) AND (LEN(FixedValue) != 4 OR ISNUMERIC(FixedValue) != 1) THEN\t\t\t\t\t\t\t\t\t   '-'  --year\n\t\t\tWHEN (id = 2) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 12) THEN '-'\t--month\n\t\t\tWHEN (id = 3) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 31) THEN '-'\t--day\n            WHEN (id = 4) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 23) THEN '-'    --hours\n            WHEN (id = 5) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'    --minutes\n            WHEN (id = 6) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'    --seconds\n\n\t\t\tELSE FixedValue \n\t\tEND\n\n\t-- the date is invalid in case one part is empty('-') and it's not a stop word\n\tIF(EXISTS(SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND IsStopWord = 0))\n\t\tGOTO INVALID_DATE\n\n\t-- delete trailing empty ('-') date and time values from @dateParts\n\tWHILE EXISTS (SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts))\n\t\tDELETE FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts)\n\n\t-- get day component\n\tSELECT @year = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 1\n\tSELECT @month = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 2\n\tSELECT @day = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 3\n\n\t-- validate day component if year, month and day present\n\tIF(@year IS NOT NULL AND @month IS NOT NULL AND @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, ((@year - 1900) * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is Feb.\n\tELSE IF (@month='02')\n\t\tBEGIN\n\t\t\tIF (@day NOT BETWEEN 1 AND 29)\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is not Feb.\n\tELSE IF(@month IS NOT NULL and @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, (1900 * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\tEND\n\n\tCONTINUE_PROC:\n\n\t-- set datePart\n\tSELECT @datePart = COALESCE(@datePart + '-', '') + FixedValue\n\tFROM @DateAndTimeParts\n\tWHERE id between 1 and 3\n\n\t-- set timePart\n\tSELECT @timePart = COALESCE(@timePart + ':', '') + FixedValue\n\tFROM @DateAndTimeParts\n\tWHERE id between 4 and 6\n\n\tIF(@timePart IS NOT NULL)\n\t\tSELECT @OMCMISODateTime = @datePart + 'T' + @timePart\n\tELSE\n\t\tSELECT @OMCMISODateTime = @datePart\n\t\n\tRETURN @OMCMISODateTime\n\n\tINVALID_DATE:\n\t\tRETURN NULL\n"
    },
    "43cda83c-6e58-41a6-991f-95690df4939f": {
        "Prototype": "OMCME2BDateTime ( @date varchar(48), @time varchar(48) ) RETURNS varchar(19)",
        "Description": "Get DateTime in E2B format",
        "Body": "\n\tDECLARE @OMCMISODateTime nvarchar(19), @year nvarchar(4), @month nvarchar(2), @day nvarchar(2)\n\tDECLARE @datePart nvarchar(10), @timePart nvarchar(8)\n\n\tDECLARE @DateAndTimeParts TABLE (id INT IDENTITY(1,1) PRIMARY KEY, FixedValue NVARCHAR(50), IsStopWord bit default 0)\n\tDECLARE @StopWords TABLE (stopWord nvarchar(10))\n\n\t-- populate whe stop words are populated at the time of function generation\n\tINSERT INTO @StopWords(stopWord) VALUES ('UNK'),('NA')\n\n\t-- make sure there are two / characters in the date\n\tWHILE (LEN(@date)-LEN(REPLACE(@date,'/','')) < 2)\n\t\tSET @date = @date + '/'\n\n\t-- populate @DateAndTimeParts with date and time parts\n\tDECLARE @DXML AS XML = CAST(('<i>' + REPLACE(REPLACE(@date + '/' + @time, '/', '</i><i>'), ':', '</i><i>') + '</i>') AS XML)\n\tINSERT INTO @DateAndTimeParts (IsStopWord, FixedValue)\n\tSELECT \n\t\tCASE \n\t\t\tWHEN N.value('.', 'VARCHAR(10)')='' THEN 1\n\t\t\tWHEN s.stopWord IS NULL THEN 0 \n\t\t\tELSE 1 END,\n\t\t\tISNULL(NULLIF(N.value('.', 'VARCHAR(10)'),''),(SELECT TOP 1 stopWord FROM @StopWords))\n\tFROM @DXML.nodes('i') as T(N) \n\tLEFT OUTER JOIN @StopWords s ON s.stopWord = N.value('.', 'VARCHAR(10)')\n\n\t-- validate date parts: Replace invalid parts with empty('-') values\n\tUPDATE @DateAndTimeParts \n\tSET FixedValue = \n\t\tCASE \n\t\t\tWHEN (id = 1) AND (LEN(FixedValue) != 4 OR ISNUMERIC(FixedValue) != 1) THEN\t\t\t\t\t\t\t\t\t   '-'  --year\n\t\t\tWHEN (id = 2) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 12) THEN '-'\t--month\n\t\t\tWHEN (id = 3) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 31) THEN '-'\t--day\n            WHEN (id = 4) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 23) THEN '-'   --hours\n            WHEN (id = 5) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'    --minutes\n            WHEN (id = 6) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'    --seconds\n\n\t\t\tELSE FixedValue \n\t\tEND\n\n\t-- the date is invalid in case one part is empty('-') and it's not a stop word\n\tIF(EXISTS(SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND IsStopWord = 0))\n\t\tGOTO INVALID_DATE\n\n\t-- delete trailing empty ('-') date and time values from @dateParts\n\tWHILE EXISTS (SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts))\n\t\tDELETE FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts)\n\n\t-- get day component\n\tSELECT @year = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 1\n\tSELECT @month = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 2\n\tSELECT @day = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 3\n\n\t-- validate day component if year, month and day present\n\tIF(@year IS NOT NULL AND @month IS NOT NULL AND @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, ((@year - 1900) * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is Feb.\n\tELSE IF (@month='02')\n\t\tBEGIN\n\t\t\tIF (@day NOT BETWEEN 1 AND 29)\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is not Feb.\n\tELSE IF(@month IS NOT NULL and @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, (1900 * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\tEND\n\n\tCONTINUE_PROC:\n\n\t-- set datePart\n\tSELECT @datePart = COALESCE(@datePart + '', '') + FixedValue\n\tFROM @DateAndTimeParts\n\tWHERE id between 1 and 3\n\n\t-- set timePart\n\tSELECT @timePart = COALESCE(@timePart + '', '') + FixedValue\n\tFROM @DateAndTimeParts\n\tWHERE id between 4 and 6\n\n\tIF(@timePart IS NOT NULL)\n\t\tSELECT @OMCMISODateTime = @datePart + @timePart\n\tELSE\n\t\tSELECT @OMCMISODateTime = @datePart\n\t\n\tRETURN @OMCMISODateTime\n\n\tINVALID_DATE:\n\t\tRETURN NULL\n"
    },
    "c9ff18d9-0e8f-4530-b4e9-6fda1bfac9ab": {
        "Prototype": "OMCME2BDate (@Date VARCHAR(48)) RETURNS VARCHAR(10)",
        "Description": "Get date in E2B format",
        "Body": "\n\tDECLARE @year nvarchar(4), @month nvarchar(2), @day nvarchar(2)\n\tDECLARE @datePart nvarchar(10)\n\n\tDECLARE @DateAndTimeParts TABLE (id INT IDENTITY(1,1) PRIMARY KEY, FixedValue NVARCHAR(50), IsStopWord bit default 0)\n\tDECLARE @StopWords TABLE (stopWord nvarchar(10))\n\n\t-- populate whe stop words are populated at the time of function generation\n\tINSERT INTO @StopWords(stopWord) VALUES ('UNK'),('NA')\n\n\t-- make sure there are two / characters in the date\n\tWHILE (LEN(@date)-LEN(REPLACE(@date,'/','')) < 2)\n\t\tSET @date = @date + '/'\n\n\t-- populate @DateAndTimeParts with date and time parts\n\tDECLARE @DXML AS XML = CAST(('<i>' + REPLACE(@date, '/', '</i><i>') + '</i>') AS XML)\n\tINSERT INTO @DateAndTimeParts (IsStopWord, FixedValue)\n\tSELECT \n\t\tCASE \n\t\t\tWHEN N.value('.', 'VARCHAR(10)')='' THEN 1\n\t\t\tWHEN s.stopWord IS NULL THEN 0 \n\t\t\tELSE 1 END,\n\t\t\tISNULL(NULLIF(N.value('.', 'VARCHAR(10)'),''),(SELECT TOP 1 stopWord FROM @StopWords))\n\tFROM @DXML.nodes('i') as T(N) \n\tLEFT OUTER JOIN @StopWords s ON s.stopWord = N.value('.', 'VARCHAR(10)')\n\n\t-- validate date parts: Replace invalid parts with empty('-') values\n\tUPDATE @DateAndTimeParts \n\tSET FixedValue = \n\t\tCASE \n\t\t\tWHEN (id = 1) AND (LEN(FixedValue) != 4 OR ISNUMERIC(FixedValue) != 1) THEN\t\t\t\t\t\t\t\t\t   '-'  --year\n\t\t\tWHEN (id = 2) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 12) THEN '-'\t--month\n\t\t\tWHEN (id = 3) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 31) THEN '-'\t--day\n\t\t\tELSE FixedValue \n\t\tEND\n\n\t-- the date is invalid in case one part is empty('-') and it's not a stop word\n\tIF(EXISTS(SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND IsStopWord = 0))\n\t\tGOTO INVALID_DATE\n\n\t-- delete trailing empty ('-') date and time values from @dateParts\n\tWHILE EXISTS (SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts))\n\t\tDELETE FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts)\n\n\t-- get day component\n\tSELECT @year = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 1\n\tSELECT @month = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 2\n\tSELECT @day = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 3\n\n\t-- validate day component if year, month and day present\n\tIF(@year IS NOT NULL AND @month IS NOT NULL AND @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, ((@year - 1900) * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is Feb.\n\tELSE IF (@month='02')\n\t\tBEGIN\n\t\t\tIF (@day NOT BETWEEN 1 AND 29)\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is not Feb.\n\tELSE IF(@month IS NOT NULL and @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, (1900 * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\tEND\n\n\tCONTINUE_PROC:\n\n\t-- set datePart\n\tSELECT @datePart = COALESCE(@datePart + '', '') + FixedValue\n\tFROM @DateAndTimeParts\n\n\tRETURN @datePart\n\t\n\tINVALID_DATE:\n\t\tRETURN NULL\n"
    }
}