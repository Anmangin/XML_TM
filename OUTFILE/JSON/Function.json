{
    "dbdd1cd9-086f-42c3-b5a1-3ccef37dad70": {
        "Prototype": "isDate1LDate2(d1,d2)",
        "Description": "compares dates, fires if d1 is >=  d2 for partial entries without stop words",
        "Body": "if (d1 == \"\" || d1 == NULL || d1 == null || d2 == \"\" || d2 == NULL || d2 == null)\nreturn true;\n\nvar d1len = d1.length;\nvar d2len = d2.length;\n\nif (d1len == 10 && d2len == 10) //both are full dates\n{\nvar f1 = new Date(d1);\nvar f2 = new Date(d2);\nif (f1 < f2)\n{return true;}\nelse {return false;}\n}\nelse //partial date\n{\n  var dt1sub = d1 .split(\"/\");\n  var D1M = dt1sub[1];\n  var D1Y= dt1sub[0];\n  var dt2sub = d2 .split(\"/\");\n  var D2M = dt2sub[1];\n  var D2Y= dt2sub[0];\n\n  //if date is fully partial\n  if( D1Y== \"\" || D2Y== '')\n   {return true;}\n\n  if( d1len <= 6 || d2len <= 6) //only year is given for at least 1 date\n  if(Number(D1Y) >= Number(D2Y))\n  {return false;}\n  else\n  {return true;}\n else //month and year are given for both dates\n  {\n  if(Number(D1Y) > Number(D2Y))\n  {return false;}\n    if( Number(D1Y) == Number(D2Y))\n    {\n     if(Number(D1M) >= Number(D2M))\n     {return false;}\n    else {return true;}\n   }\n else {return true;}\n }\n}"
    },
    "d67f20f8-d4b6-4fc2-a10b-73a264f6c0e1": {
        "Prototype": "isDate1LEDate2(d1,d2)",
        "Description": "compares dates, fires if d1 is >  d2 for partial entries without stop words",
        "Body": "if (d1 == \"\" || d1 == NULL || d1 == null || d2 == \"\" || d2 == NULL || d2 == null)\nreturn true;\n\nvar d1len = d1.length;\nvar d2len = d2.length;\n\nif (d1len == 10 && d2len == 10) //both are full dates\n{\nvar f1 = new Date(d1);\nvar f2 = new Date(d2);\nif (f1 <= f2)\n{return true;}\nelse {return false;}\n}\nelse //partial date\n{\n  var dt1sub = d1 .split(\"/\");\n  var D1M = dt1sub[1];\n  var D1Y= dt1sub[0];\n  var dt2sub = d2 .split(\"/\");\n  var D2M = dt2sub[1];\n  var D2Y= dt2sub[0];\n\n  //if date is fully partial\n  if( D1Y== \"\" || D2Y== '')\n   {return true;}\n\n  if( d1len <= 6 || d2len <= 6) //only year is given for at least 1 date\n  if(Number(D1Y) > Number(D2Y))\n  {return false;}\n  else\n  {return true;}\n else //month and year are given for both dates\n  {\n  if(Number(D1Y) > Number(D2Y))\n  {return false;}\n    if( Number(D1Y) == Number(D2Y))\n    {\n     if(Number(D1M) > Number(D2M))\n     {return false;}\n    else {return true;}\n   }\n else {return true;}\n }\n}"
    },
    "d5b2c15c-9ccf-4b3a-96b8-495f96e5a117": {
        "Prototype": "DaysBetween(earlierdate,laterdate)",
        "Description": "Calculates days between two dates",
        "Body": "if (earlierdate == '' || earlierdate == NULL || laterdate == '' || laterdate == NULL)\n return '';\n\nvar date1=new Date(earlierdate);\nvar date2=new Date(laterdate);\nvar oneDay = 24*60*60*1000;\nvar diffDays = Math.round((date2 - date1)/(oneDay));\nreturn diffDays;"
    },
    "c1627cdd-8879-4f62-b830-918aa7dd7316": {
        "Prototype": "arrayAllNos(arr)",
        "Description": "Examines an Array of strings, returns false if any 'Yes' (Y) answers are included",
        "Body": "var ret = true;\nfor ( var i = 0; i < arr.length; i++ ){\n  if ( arr[i] == '1' ){\n    ret =  false;\n  }\n}\nreturn ret;"
    },
    "030719a6-96e6-4aa4-a4f1-94ca2c07af0b": {
        "Prototype": "arrayAnyEmpty(arr)",
        "Description": "check if there is any empty in array",
        "Body": "var ret = true;\nfor ( var i = 0; i < arr.length; i++ ){\n  if ( arr[i] != '' ){\n    ret =  false;\n  }\n}\nreturn ret;"
    },
    "9d261bd4-44ed-458f-a232-73a83f073aea": {
        "Prototype": "isEmpty(val)",
        "Description": "Check if value is empty",
        "Body": "return (val == '' || val == null || val == NULL);"
    },
    "9a59a953-5afc-4ca4-9047-aed6f048b775": {
        "Prototype": "DateFr(date)",
        "Description": "Returns the date on the format 'dd/mm/yyyy'",
        "Body": "var year = date.substring(0,4);\nvar month= date.substring(5,7);\nvar day = date.substring(8,10);\nvar datec = day + '/' + month + '/' + year;\n\nreturn datec;"
    },
    "2c89a76b-5cc8-4c67-bbcb-97b954c83e20": {
        "Prototype": "TodayDate(dummy)",
        "Description": "Returns the date of the current day",
        "Body": "var d = new Date();\nvar day = d.getDate();\nvar month = d.getMonth()+1;\n// les mois vont de 0 (janvier) \u00e0 11 (d\u00e9cembre) dans JavaScript\nvar year = d.getFullYear();\n\nif (day < 10)\n    day = '0' + day;\n\nif (month < 10)\n    month = '0' + month;\n\nd = year + '/' + month + '/' + day;\nreturn d;"
    },
    "4150e1be-9674-4aef-b434-6f9fe1038d3d": {
        "Prototype": "DeleteNullInArray(arr)",
        "Description": "Delete empty entries in array",
        "Body": "if (arr == '')\n{return '';}\n \nvar test = new Array();\n \nfor(var i = 0; i < arr.length; i++)\nif(arr[i] != '' && arr[i] != null && arr[i] != NULL)\n{test.push(arr[i]);}\n \nreturn test;"
    },
    "a01f78bd-cf34-418e-aaad-4941d37230ab": {
        "Prototype": "NotAnyNumberInString(value)",
        "Description": "check is all caracter is not a number",
        "Body": "var len = value.length;\nvar resp = true;\nvar i=0;\nwhile (i < len ) {\nvar car = value.substr(i,1);\nif ( !isNaN(car) && car != ' ')  resp = false;\ni=i+1;\n}\n\nreturn resp;"
    },
    "7dd683e7-a388-43f7-b8ed-32ce02e0aeae": {
        "Prototype": "AgeAtGivenDate(sDOB,sDate)",
        "Description": "calculates age",
        "Body": "var dtDOB = new Date(sDOB);\nvar dtDate = new Date(sDate);\nvar intAge;\nintAge = dtDate.getFullYear() - dtDOB.getFullYear();\ndtDOB.setYear(dtDate.getFullYear())\ndtDOB.setHours(0, 0, 0, 0);\ndtDate.setHours(0, 0, 0, 0);\nif (dtDate < dtDOB) \n{ intAge --; }\nreturn intAge;"
    },
    "f56112cf-6dc5-4e00-b410-133d34ee24f3": {
        "Prototype": "AgeEnMois(birthdate,atdate)",
        "Description": "Renvoie l'\u00e2ge en mois, \u00e0 une date donn\u00e9e (une date de consentement par exemple) - compatible date partielle",
        "Body": "if (!birthdate.match(/^\\d{4}\\/\\d{2}\\/?(\\d{2})?$/) || !atdate.match(/^\\d{4}\\/\\d{2}\\/\\d{2}$/))\n\treturn NaN;\n\nvar dj = new Date(atdate);\n\nvar tab = birthdate.split(\"/\")\nvar yyyy = tab[0];\nvar mm = tab[1] - 1;\n\nif (birthdate.length == 7 || birthdate.length == 8)\n{\n\treturn (dj.getFullYear() - yyyy) * 12 + dj.getMonth() - mm - 1;\n}\n\nif (birthdate.length == 10)\n{\n\tvar dd = tab[2];\n\tvar as = dd > dj.getDate() ? 1 : 0;\n\treturn (dj.getFullYear() - yyyy) * 12 + dj.getMonth() - mm - as;\n}"
    },
    "e67f0a46-7bf6-4ee4-a532-56bebe5beb7f": {
        "Prototype": "AjouteMinutes(heure,minutes)",
        "Description": "Ajoute \u00e0 une heure donn\u00e9e (format HH:MM) un nombre de minutes",
        "Body": "if (!heure.match(/^\\d{2}:\\d{2}$/))\n\treturn NaN;\n\t\nvar tab = heure.split(\":\");\nvar hh = tab[0];\nvar m = tab[1];\n\t\nvar nminutes = minutes % 60;\nvar nheures = Math.floor(minutes / 60);\n\t\nhh = (Number(hh) + nheures + Math.floor((Number(m) + nminutes) / 60)) % 24;\nm = (Number(m) + nminutes) % 60;\n\n\t\nif (hh < 10)\n\thh = \"0\" + hh;\n\t\nif (m < 10)\n\tm = \"0\" + m;\n\t\nreturn hh + \":\" + m;"
    },
    "a6104d3a-7efa-4985-844b-6601c1017a8c": {
        "Prototype": "DiffEnMois(date1,date2)",
        "Description": "Renvoie la diff\u00e9rence de mois entre 2 dates partielles (YYYY/MM)",
        "Body": "if (!date1.match(/^\\d{4}\\/\\d{2}$/) || !date2.match(/^\\d{4}\\/\\d{2}$/))\n\treturn NaN;\n\t\nvar tab1 = date1.split(\"/\");\nvar yyyy1 = tab1[0];\nvar mm1 = tab1[1];\n\t\nvar tab2 = date2.split(\"/\");\nvar yyyy2 = tab2[0];\nvar mm2 = tab2[1];\n\nvar nam = (yyyy2 - yyyy1) * 12;\nvar nm = (mm2 - mm1) + nam;\n\nreturn nm;"
    },
    "7dd33df6-d311-4619-8ff1-1960ecdf0230": {
        "Prototype": "FindMostRecentDate(array)",
        "Description": "Returns the most recent date in an array of dates",
        "Body": "var dtmax = array[0];\nvar len = array.length;\nvar i = 1;\n\nfunction isDate1LEDate2(d1,d2) {\nif (d1 == \"\" || d2 == \"\")\nreturn true;\nvar iD1 = d1.search(/UN/);\nvar iD2 = d2.search(/UN/);\nif (iD1 == -1 && iD2 == -1)\n{\nvar f1 = new Date(d1);\nvar f2 = new Date(d2);\nif (f1 <= f2)\n{return true;}\nelse {return false;}\n} var s1 = d1.split(\"/\");\nvar s2 = d2.split(\"/\");\nvar D1Y = s1[0];\nvar D1M = s1[1];\nvar D1D = s1[2];\nvar D2Y = s2[0];\nvar D2M = s2[1];\nvar D2D = s2[2];\nif( D1Y == \"UN\" || D2Y == \"UN\")\nreturn true;\nif(D1M == \"UN\" || D2M == \"UN\")\n{\nif(Number(D1Y) > Number(D2Y))\n{return false;}\nelse\n{return true;}\n}\nelse\n{\nif(Number(D1Y) > Number(D2Y))\n{return false;}\nif( Number(D1Y) == Number(D2Y))\n{\nif(Number(D1M) > Number(D2M))\n{return false;}\nelse {return true;}\n}\nelse {return true;}\n}\n}\n\n\nfor (i; i < len; i++){\n  if (!isDate1LEDate2(array[i],dtmax)) {\n     dtmax = array[i];\n  }\n}\nreturn dtmax;"
    },
    "5156ff6e-b3dd-400b-bc31-4bf869267c51": {
        "Prototype": "GetObjDate(date,objet)",
        "Description": "Get one object of a date (the day, the month or the year)",
        "Body": "var d = date.split(\"/\");\nvar year = d[0];\nvar month = d[1];\nvar day = d[2];\n\n//objet peut prendre 3 valeurs : \n//\"d\" si on veut r\u00e9cup\u00e9rer le jour\n//\"m\" si on veut r\u00e9cup\u00e9rer le mois\n//\"y\" si on veut r\u00e9cup\u00e9rer l'ann\u00e9e\nif (objet == 'd')\n    return day;\nif (objet == 'm')\n    return month;\nif (objet == 'y')\n    return year;"
    },
    "ea76e866-b086-4aca-b88a-e250faae7504": {
        "Prototype": "NombreDeDecimales(n)",
        "Description": "Renvoie le nombre de d\u00e9cimales saisies dans un nombre r\u00e9el",
        "Body": "if (isNaN(n))\n    return NaN;\n    \nif (Math.floor(n) != n)\n    return n.toString().split(\".\")[1].length;\nelse\n    return 0;"
    },
    "d323d87e-1ded-411f-a50f-815a51e6ff0c": {
        "Prototype": "SearchDecPoint(value)",
        "Description": "V\u00e9rifier si la variable contient un point",
        "Body": "var val = value.search(/\\./);\nif (val == '-1')\nreturn(true);\nelse\nreturn (false);"
    },
    "a82c3417-f33a-4f6a-b969-3d7396329c3c": {
        "Prototype": "isDate1LEDate2Partial(d1,d2)",
        "Description": "compares dates, fires if d1 is >  d2 for partial entries without stop words",
        "Body": "if (d1 == \"\" || d1 == NULL || d1 == null || d2 == \"\" || d2 == NULL || d2 == null)\nreturn true;\n\nvar d1len = d1.length;\nvar d2len = d2.length;\n\nif (d1len == 10 && d2len == 10) //both are full dates\n{\nvar f1 = new Date(d1);\nvar f2 = new Date(d2);\nif (f1 <= f2)\n{return true;}\nelse {return false;}\n}\nelse //partial date\n{\n  var dt1sub = d1 .split(\"/\");\n  var D1M = dt1sub[1];\n  var D1Y= dt1sub[0];\n  var dt2sub = d2 .split(\"/\");\n  var D2M = dt2sub[1];\n  var D2Y= dt2sub[0];\n\n  //if date is fully partial\n  if( D1Y== \"\" || D2Y== '')\n   {return true;}\n\n  if( d1len <= 6 || d2len <= 6) //only year is given for at least 1 date\n  if(Number(D1Y) > Number(D2Y))\n  {return false;}\n  else\n  {return true;}\n else //month and year are given for both dates\n  {\n  if(Number(D1Y) > Number(D2Y))\n  {return false;}\n    if( Number(D1Y) == Number(D2Y))\n    {\n     if(Number(D1M) > Number(D2M))\n     {return false;}\n    else {return true;}\n   }\n else {return true;}\n }\n}"
    },
    "e11c6e12-5add-4fc7-abac-2021f31d547b": {
        "Prototype": "zeroPad(num,count)",
        "Description": "Adding padding zeros to subject number. For example, subject \"1\" will be \"01\"",
        "Body": "var numZeropad = num.toString() + '';\nwhile ( numZeropad.length < count ){\n  numZeropad = '0' + numZeropad;\n}\nreturn numZeropad;"
    },
    "33918c54-61dc-4ffb-991f-ba1726c40fa5": {
        "Prototype": "ReturnEntryAtPosition(arr,int)",
        "Description": "\n          ",
        "Body": "if (arr == '' || arr == null || arr == NULL)\n    return '';\nelse {\n    return arr[int];\n}"
    },
    "f92bcd8b-da2c-443d-9870-7d8ba67ce651": {
        "Prototype": "isDate1LDate2Partial(d1,d2)",
        "Description": "compares dates, fires if d1 is >=  d2 for partial entries without stop words",
        "Body": "if (d1 == \"\" || d1 == NULL || d1 == null || d2 == \"\" || d2 == NULL || d2 == null)\nreturn true;\n\nvar d1len = d1.length;\nvar d2len = d2.length;\n\nif (d1len == 10 && d2len == 10) //both are full dates\n{\nvar f1 = new Date(d1);\nvar f2 = new Date(d2);\nif (f1 < f2)\n{return true;}\nelse {return false;}\n}\nelse //partial date\n{\n  var dt1sub = d1 .split(\"/\");\n  var D1M = dt1sub[1];\n  var D1Y= dt1sub[0];\n  var dt2sub = d2 .split(\"/\");\n  var D2M = dt2sub[1];\n  var D2Y= dt2sub[0];\n\n  //if date is fully partial\n  if( D1Y== \"\" || D2Y== '')\n   {return true;}\n\n  if( d1len <= 6 || d2len <= 6) //only year is given for at least 1 date\n  if(Number(D1Y) >= Number(D2Y))\n  {return false;}\n  else\n  {return true;}\n else //month and year are given for both dates\n  {\n  if(Number(D1Y) > Number(D2Y))\n  {return false;}\n    if( Number(D1Y) == Number(D2Y))\n    {\n     if(Number(D1M) >= Number(D2M))\n     {return false;}\n    else {return true;}\n   }\n else {return true;}\n }\n}"
    },
    "bbd383ac-9f33-4bd9-90a7-4c1abb1f86f1": {
        "Prototype": "GetNextNumber(level)",
        "Description": "Retrieves the next number based on a value entered. Allows the incrementing of forms, visits, etc.",
        "Body": "return \"/EX@FN/001\" + level;"
    },
    "d4a1f575-7aad-40f1-8020-debc82794ece": {
        "Prototype": "GetNextNumberFromTable(templateName,key1,key2,key3,key4,key5,key6,key7,key8,key9,key10)",
        "Description": "Grabs the next number available from a user-created Unique Numbering Table. Primarily used for randomization.",
        "Body": "return \"/EX@FN/002\"+templateName+\"/SEP/\"+(key1==null?\"\":(key1+\"/SEP/\"))+(key2==null?\"\":(key2+\"/SEP/\"))+(key3==null?\"\":(key3+\"/SEP/\"))+(key4==null?\"\":(key4+\"/SEP/\"))+(key5==null?\"\":(key5+\"/SEP/\"))+(key6==null?\"\":(key6+\"/SEP/\"))+(key7==null?\"\":(key7+\"/SEP/\"))+(key8==null?\"\":(key8+\"/SEP/\"))+(key9==null?\"\":(key9+\"/SEP/\"))+(key10==null?\"\":(key10+\"/SEP/\"))+\"/END/\";"
    },
    "9d9df004-3f12-4a82-93bb-4eaacc1cb2a4": {
        "Prototype": "AddDaysToDate(date,numDay)",
        "Description": "Calculates a new future date based on a date entered. Used to schedule new visits, for example.",
        "Body": "var retDT = ''; if (!(date==null || date=='' || date==NULL)) { var d = new Date(date); d.setDate(d.getDate()+Number(numDay)); retDT = d.getFullYear() + '/' + (d.getMonth()+1 < 10 ? '0' : '') + (d.getMonth()+1).toString() + '/' + (d.getDate() < 10 ? '0' : '') + (d.getDate()).toString(); if (retDT=='NaN/NaN/NaN') return '';} return retDT;"
    },
    "7049ae9c-a595-4626-9bae-fb7aab91d89d": {
        "Prototype": "CheckLabsRange(minValue,maxValue,labResult)",
        "Description": "Compares a lab result to an allowable range, and flags results that are out of range.",
        "Body": "if(labResult < minValue) return -1; if(minValue <= labResult && maxValue >= labResult) return 0; if(labResult > maxValue) return 1;"
    },
    "d173b84a-da1d-4cb2-a6b4-59db850414d7": {
        "Prototype": "GetCustomValueFromTable(templateName,columnName,keyQuestion)",
        "Description": "Grabs a specific value from a user-created Unique Numbering Table, based on data entered by the user.",
        "Body": "return \"/EX@FN/005\"+templateName+\"/SEP/\"+columnName+\"/SEP/\"+keyQuestion+\"/END/\";"
    },
    "bc2a8af1-1054-4c4b-bf93-e37b4c140e43": {
        "Prototype": "OMCMGetYear(@DataValue nvarchar(4000)) RETURNS smallint",
        "Description": "Get Year from TrialMaster date",
        "Body": "DECLARE @retVal nvarchar(4)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex('/', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex('/', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 1\nEND\nIF LEN(@retVal) = 4 AND ISNUMERIC(@retVal) = 1 \n\tRETURN @retVal\nRETURN null"
    },
    "3f98da0d-fbc1-4915-9c68-6e6987bc4fb7": {
        "Prototype": "OMCMGetMonth(@DataValue nvarchar(4000))RETURNS smallint",
        "Description": "Get Month from TrialMaster date",
        "Body": "DECLARE @retVal nvarchar(2)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex('/', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex('/', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 2\nEND\nIF LEN(@retVal) BETWEEN 1 AND 2 AND ISNUMERIC(@retVal) = 1\nBEGIN\n\tIF @retVal BETWEEN 1 AND 12\n\t\tRETURN @retVal\nEND\nRETURN null"
    },
    "2436ea25-e615-4961-ba4d-2dac0e9287a9": {
        "Prototype": "OMCMGetDay(@DataValue nvarchar(4000))RETURNS smallint",
        "Description": "Get Day from TrialMaster date",
        "Body": "DECLARE @retVal nvarchar(2)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex('/', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex('/', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 3\nEND\nIF LEN(@retVal) BETWEEN 1 AND 2 AND ISNUMERIC(@retVal) = 1\nBEGIN\n\tIF @retVal BETWEEN 1 AND 31\n\t\tRETURN @retVal\nEND\nRETURN null"
    },
    "209e47d3-9cb6-47e7-a66e-3537a94a56bc": {
        "Prototype": "OMCMGetHour(@DataValue nvarchar(4000))RETURNS smallint",
        "Description": "Get Hour from TrialMaster time",
        "Body": "DECLARE @retVal nvarchar(2)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex(':', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex(':', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 1\nEND\nIF LEN(@retVal) BETWEEN 1 AND 2 AND ISNUMERIC(@retVal) = 1\nBEGIN\n\tIF @retVal BETWEEN 0 AND 23\n\t\tRETURN @retVal\nEND\nRETURN null"
    },
    "63cab1d0-c19b-4e2b-be04-ba5497f0f604": {
        "Prototype": "OMCMGetMinute(@DataValue nvarchar(4000))RETURNS smallint",
        "Description": "Get Minute from TrialMaster time",
        "Body": "DECLARE @retVal nvarchar(2)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex(':', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex(':', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 2\nEND\nIF LEN(@retVal) BETWEEN 1 AND 2 AND ISNUMERIC(@retVal) = 1\nBEGIN\n\tIF @retVal BETWEEN 0 AND 59\n\t\tRETURN @retVal\nEND\nRETURN null"
    },
    "9d3819e9-37f1-4d48-bd1a-154073816895": {
        "Prototype": "OMCMGetSecond(@DataValue nvarchar(4000))RETURNS smallint",
        "Description": "Get Second from TrialMaster time",
        "Body": "DECLARE @retVal nvarchar(2)\nBEGIN\n\tWITH tokens(p, a, b) AS \n\t(\n\t\tSELECT 1, 1, charindex(':', @DataValue)\n\t\tUNION ALL\n\t\tSELECT p + 1, b + 1, charindex(':', @DataValue, b + 1)\n\t\tFROM tokens\n\t\tWHERE b > 0\n\t)\n\tSELECT @retVal = LTRIM(RTRIM(substring(@DataValue, a, CASE WHEN b > 0 THEN b-a ELSE 4000 END)))\n\tFROM tokens\n\tWHERE p = 3\nEND\nIF LEN(@retVal) BETWEEN 1 AND 2 AND ISNUMERIC(@retVal) = 1\nBEGIN\n\tIF @retVal BETWEEN 0 AND 59\n\t\tRETURN @retVal\nEND\nRETURN null"
    },
    "60af88fb-d75e-4750-b90a-6fd80d5bb80b": {
        "Prototype": "OMCMDate9 ( @date varchar(20) ) RETURNS int",
        "Description": "Get date in SAS format.",
        "Body": "DECLARE @retval int; if isdate(@date)=1 begin SET @retval = datediff(day,'19600101',convert(datetime,@date,111)); end else begin SET @retval = null end RETURN @retval;"
    },
    "521bcc9b-0c80-45bd-8c23-40ca5c53e90d": {
        "Prototype": "OMCMTime8 ( @time varchar(20) ) RETURNS int",
        "Description": "Get time in SAS format for variables of control type HourMinuteSecond",
        "Body": "DECLARE @retval int; \n\tif isdate(@time)=1 \n\t\tBEGIN \n\t\t\tSET @retval = convert(int,substring(@time,1,2))*3600 +convert(int,substring(@time,4,2))*60 + convert(int,substring(@time,7,2));\n\t\tEND\n\telse\n\t\tBEGIN\n\t\t\tSET @retval = null;\n\t\tEND\nRETURN @retval;"
    },
    "5f38aa13-6acb-4840-8263-f062f1e9469d": {
        "Prototype": "OMCMTime5 ( @time varchar(20) ) RETURNS int",
        "Description": "Get time in SAS format for variables of control type HourMinute",
        "Body": "DECLARE @retval int; \n\tif isdate(@time)=1 \n\t\tBEGIN \n\t\t\tif substring(@time,2,1) = ':'\n\t\t\t\tselect @time = concat( '0', @time) \n\t\t\tSET @retval = convert(int,substring(@time,1,2))*3600 +convert(int,substring(@time,4,2))*60; \n\t\tEND\n\telse\n\t\tBEGIN\n\t\t\tSET @retval = null;\n\t\tEND\nRETURN @retval;"
    },
    "ef1381a3-cb9f-4944-be26-13d2e4fd556a": {
        "Prototype": "OMCMISO8601Date (@Date VARCHAR(48)) RETURNS VARCHAR(10)",
        "Description": "Get date in ISO8601 format",
        "Body": "\n\tSET @Date = REPLACE(REPLACE(@Date, '---', '/NA/'),'-','/') -- if @date already in ISO format, replace dividers with stop words\n\n\tDECLARE @year nvarchar(4), @month nvarchar(2), @day nvarchar(2)\n\tDECLARE @datePart nvarchar(10)\n\n\tDECLARE @DateAndTimeParts TABLE (id INT IDENTITY(1,1) PRIMARY KEY, FixedValue NVARCHAR(50), IsStopWord bit default 0)\n\tDECLARE @StopWords TABLE (stopWord nvarchar(10))\n\n\t-- populate whe stop words are populated at the time of function generation\n\tINSERT INTO @StopWords(stopWord) VALUES ('UNK'),('NA')\n\n\t-- make sure there are two / characters in the date\n\tWHILE (LEN(@date)-LEN(REPLACE(@date,'/','')) < 2)\n\t\tSET @date = @date + '/'\n\n\t-- populate @DateAndTimeParts with date and time parts\n\tDECLARE @DXML AS XML = CAST(('<i>' + REPLACE(@date, '/', '</i><i>') + '</i>') AS XML)\n\tINSERT INTO @DateAndTimeParts (IsStopWord, FixedValue)\n\tSELECT \n\t\tCASE \n\t\t\tWHEN N.value('.', 'VARCHAR(10)')='' THEN 1\n\t\t\tWHEN s.stopWord IS NULL THEN 0 \n\t\t\tELSE 1 END,\n\t\t\tISNULL(NULLIF(N.value('.', 'VARCHAR(10)'),''),(SELECT TOP 1 stopWord FROM @StopWords))\n\tFROM @DXML.nodes('i') as T(N) \n\tLEFT OUTER JOIN @StopWords s ON s.stopWord = N.value('.', 'VARCHAR(10)')\n\n\t-- validate date parts: Replace invalid parts with empty('-') values\n\tUPDATE @DateAndTimeParts \n\tSET FixedValue = \n\t\tCASE \n\t\t\tWHEN (id = 1) AND (LEN(FixedValue) != 4 OR ISNUMERIC(FixedValue) != 1) THEN\t\t\t\t\t\t\t\t\t   '-'  --year\n\t\t\tWHEN (id = 2) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 12) THEN '-'\t--month\n\t\t\tWHEN (id = 3) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 31) THEN '-'\t--day\n\t\t\tELSE FixedValue \n\t\tEND\n\n\t-- the date is invalid in case one part is empty('-') and it's not a stop word\n\tIF(EXISTS(SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND IsStopWord = 0))\n\t\tGOTO INVALID_DATE\n\n\t-- delete trailing empty ('-') date and time values from @dateParts\n\tWHILE EXISTS (SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts))\n\t\tDELETE FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts)\n\n\t-- get day component\n\tSELECT @year = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 1\n\tSELECT @month = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 2\n\tSELECT @day = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 3\n\n\t-- validate day component if year, month and day present\n\tIF(@year IS NOT NULL AND @month IS NOT NULL AND @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, ((@year - 1900) * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is Feb.\n\tELSE IF (@month='02')\n\t\tBEGIN\n\t\t\tIF (@day NOT BETWEEN 1 AND 29)\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is not Feb.\n\tELSE IF(@month IS NOT NULL and @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, (1900 * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\tEND\n\n\tCONTINUE_PROC:\n\n\t-- set datePart\n\tSELECT @datePart = COALESCE(@datePart + '-', '') + FixedValue\n\tFROM @DateAndTimeParts\n\n\tRETURN @datePart\n\t\n\tINVALID_DATE:\n\t\tRETURN NULL\n"
    },
    "1bbd147c-b97a-491c-a7e5-86694cfb5320": {
        "Prototype": "OMCMISO8601Time (@Time VARCHAR(48)) RETURNS VARCHAR(8)",
        "Description": "Get time in ISO8601 format",
        "Body": "\n\tSET @Time = REPLACE(@Time,'-','NA') -- if @time already in ISO format, replace divider with stop word\n\n\tDECLARE @timePart nvarchar(8)\n\n\tDECLARE @DateAndTimeParts TABLE (id INT IDENTITY(1,1) PRIMARY KEY, FixedValue NVARCHAR(50), IsStopWord bit default 0)\n\tDECLARE @StopWords TABLE (stopWord nvarchar(10))\n\n\t-- populate whe stop words are populated at the time of function generation\n\tINSERT INTO @StopWords(stopWord) VALUES ('UNK'),('NA')\n\n\t-- populate @DateAndTimeParts with date and time parts\n\tDECLARE @DXML AS XML = CAST(('<i>' + REPLACE(@time, ':', '</i><i>') + '</i>') AS XML)\n\tINSERT INTO @DateAndTimeParts (IsStopWord, FixedValue)\n\tSELECT \n\t\tCASE \n\t\t\tWHEN N.value('.', 'VARCHAR(10)')='' THEN 1\n\t\t\tWHEN s.stopWord IS NULL THEN 0 \n\t\t\tELSE 1 END,\n\t\t\tISNULL(NULLIF(N.value('.', 'VARCHAR(10)'),''),(SELECT TOP 1 stopWord FROM @StopWords))\n\tFROM @DXML.nodes('i') as T(N) \n\tLEFT OUTER JOIN @StopWords s ON s.stopWord = N.value('.', 'VARCHAR(10)')\n\n\t-- validate date parts: Replace invalid parts with empty('-') values\n\tUPDATE @DateAndTimeParts \n\tSET FixedValue = \n\t\tCASE \n\t\t\tWHEN (id = 1) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 23) THEN '-'\t--hours\n\t\t\tWHEN (id = 2) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'\t--minutes\n\t\t\tWHEN (id = 3) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'\t--seconds\n\t\t\tELSE FixedValue \n\t\tEND\n\n\t-- the date is invalid in case one part is empty('-') and it's not a stop word\n\tIF(EXISTS(SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND IsStopWord = 0))\n\t\tGOTO INVALID_DATE\n\n\t-- delete trailing empty ('-') date and time values from @dateParts\n\tWHILE EXISTS (SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts))\n\t\tDELETE FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts)\n\n\t-- set timePart\n\tSELECT @timePart = COALESCE(@timePart + ':', '') + FixedValue\n\tFROM @DateAndTimeParts\n\n\tRETURN @timePart\n\t\n\tINVALID_DATE:\n\t\tRETURN NULL\n"
    },
    "d1c021f0-5e1c-481d-83b7-982ac691eb5b": {
        "Prototype": "OMCMISO8601DateTime ( @date varchar(48), @time varchar(48) ) RETURNS varchar(19)",
        "Description": "Get DateTime in ISO8601 format",
        "Body": "\n\tSET @Date = REPLACE(REPLACE(@Date, '---', '/NA/'),'-','/') -- if @date already in ISO format, replace dividers with stop words\n\tSET @Time = REPLACE(@Time,'-','NA') -- if @time already in ISO format, replace dividers with stop words\n\n\tDECLARE @OMCMISODateTime nvarchar(19), @year nvarchar(4), @month nvarchar(2), @day nvarchar(2)\n\tDECLARE @datePart nvarchar(10), @timePart nvarchar(8)\n\n\tDECLARE @DateAndTimeParts TABLE (id INT IDENTITY(1,1) PRIMARY KEY, FixedValue NVARCHAR(50), IsStopWord bit default 0)\n\tDECLARE @StopWords TABLE (stopWord nvarchar(10))\n\n\t-- populate whe stop words are populated at the time of function generation\n\tINSERT INTO @StopWords(stopWord) VALUES ('UNK'),('NA')\n\n\t-- make sure there are two / characters in the date\n\tWHILE (LEN(@date)-LEN(REPLACE(@date,'/','')) < 2)\n\t\tSET @date = @date + '/'\n\n\t-- populate @DateAndTimeParts with date and time parts\n\tDECLARE @DXML AS XML = CAST(('<i>' + REPLACE(REPLACE(@date + '/' + @time, '/', '</i><i>'), ':', '</i><i>') + '</i>') AS XML)\n\tINSERT INTO @DateAndTimeParts (IsStopWord, FixedValue)\n\tSELECT \n\t\tCASE \n\t\t\tWHEN N.value('.', 'VARCHAR(10)')='' THEN 1\n\t\t\tWHEN s.stopWord IS NULL THEN 0 \n\t\t\tELSE 1 END,\n\t\t\tISNULL(NULLIF(N.value('.', 'VARCHAR(10)'),''),(SELECT TOP 1 stopWord FROM @StopWords))\n\tFROM @DXML.nodes('i') as T(N) \n\tLEFT OUTER JOIN @StopWords s ON s.stopWord = N.value('.', 'VARCHAR(10)')\n\n\t-- validate date parts: Replace invalid parts with empty('-') values\n\tUPDATE @DateAndTimeParts \n\tSET FixedValue = \n\t\tCASE \n\t\t\tWHEN (id = 1) AND (LEN(FixedValue) != 4 OR ISNUMERIC(FixedValue) != 1) THEN\t\t\t\t\t\t\t\t\t   '-'  --year\n\t\t\tWHEN (id = 2) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 12) THEN '-'\t--month\n\t\t\tWHEN (id = 3) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 31) THEN '-'\t--day\n            WHEN (id = 4) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 23) THEN '-'   --hours\n            WHEN (id = 5) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'    --minutes\n            WHEN (id = 6) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'    --seconds\n\n\t\t\tELSE FixedValue \n\t\tEND\n\n\t-- the date is invalid in case one part is empty('-') and it's not a stop word\n\tIF(EXISTS(SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND IsStopWord = 0))\n\t\tGOTO INVALID_DATE\n\n\t-- delete trailing empty ('-') date and time values from @dateParts\n\tWHILE EXISTS (SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts))\n\t\tDELETE FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts)\n\n\t-- get day component\n\tSELECT @year = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 1\n\tSELECT @month = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 2\n\tSELECT @day = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 3\n\n\t-- validate day component if year, month and day present\n\tIF(@year IS NOT NULL AND @month IS NOT NULL AND @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, ((@year - 1900) * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is Feb.\n\tELSE IF (@month='02')\n\t\tBEGIN\n\t\t\tIF (@day NOT BETWEEN 1 AND 29)\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is not Feb.\n\tELSE IF(@month IS NOT NULL and @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, (1900 * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\tEND\n\n\tCONTINUE_PROC:\n\n\t-- set datePart\n\tSELECT @datePart = COALESCE(@datePart + '-', '') + FixedValue\n\tFROM @DateAndTimeParts\n\tWHERE id between 1 and 3\n\n\t-- set timePart\n\tSELECT @timePart = COALESCE(@timePart + ':', '') + FixedValue\n\tFROM @DateAndTimeParts\n\tWHERE id between 4 and 6\n\n\tIF(@timePart IS NOT NULL)\n\t\tSELECT @OMCMISODateTime = @datePart + 'T' + @timePart\n\tELSE\n\t\tSELECT @OMCMISODateTime = @datePart\n\t\n\tRETURN @OMCMISODateTime\n\n\tINVALID_DATE:\n\t\tRETURN NULL\n"
    },
    "43cda83c-6e58-41a6-991f-95690df4939f": {
        "Prototype": "OMCME2BDateTime ( @date varchar(48), @time varchar(48) ) RETURNS varchar(19)",
        "Description": "Get DateTime in E2B format",
        "Body": "\n\tDECLARE @OMCMISODateTime nvarchar(19), @year nvarchar(4), @month nvarchar(2), @day nvarchar(2)\n\tDECLARE @datePart nvarchar(10), @timePart nvarchar(8)\n\n\tDECLARE @DateAndTimeParts TABLE (id INT IDENTITY(1,1) PRIMARY KEY, FixedValue NVARCHAR(50), IsStopWord bit default 0)\n\tDECLARE @StopWords TABLE (stopWord nvarchar(10))\n\n\t-- populate whe stop words are populated at the time of function generation\n\tINSERT INTO @StopWords(stopWord) VALUES ('UNK'),('NA')\n\n\t-- make sure there are two / characters in the date\n\tWHILE (LEN(@date)-LEN(REPLACE(@date,'/','')) < 2)\n\t\tSET @date = @date + '/'\n\n\t-- populate @DateAndTimeParts with date and time parts\n\tDECLARE @DXML AS XML = CAST(('<i>' + REPLACE(REPLACE(@date + '/' + @time, '/', '</i><i>'), ':', '</i><i>') + '</i>') AS XML)\n\tINSERT INTO @DateAndTimeParts (IsStopWord, FixedValue)\n\tSELECT \n\t\tCASE \n\t\t\tWHEN N.value('.', 'VARCHAR(10)')='' THEN 1\n\t\t\tWHEN s.stopWord IS NULL THEN 0 \n\t\t\tELSE 1 END,\n\t\t\tISNULL(NULLIF(N.value('.', 'VARCHAR(10)'),''),(SELECT TOP 1 stopWord FROM @StopWords))\n\tFROM @DXML.nodes('i') as T(N) \n\tLEFT OUTER JOIN @StopWords s ON s.stopWord = N.value('.', 'VARCHAR(10)')\n\n\t-- validate date parts: Replace invalid parts with empty('-') values\n\tUPDATE @DateAndTimeParts \n\tSET FixedValue = \n\t\tCASE \n\t\t\tWHEN (id = 1) AND (LEN(FixedValue) != 4 OR ISNUMERIC(FixedValue) != 1) THEN\t\t\t\t\t\t\t\t\t   '-'  --year\n\t\t\tWHEN (id = 2) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 12) THEN '-'\t--month\n\t\t\tWHEN (id = 3) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 31) THEN '-'\t--day\n            WHEN (id = 4) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 23) THEN '-'   --hours\n            WHEN (id = 5) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'    --minutes\n            WHEN (id = 6) AND (LEN(FixedValue) NOT BETWEEN 1 AND 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 0 and 59) THEN '-'    --seconds\n\n\t\t\tELSE FixedValue \n\t\tEND\n\n\t-- the date is invalid in case one part is empty('-') and it's not a stop word\n\tIF(EXISTS(SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND IsStopWord = 0))\n\t\tGOTO INVALID_DATE\n\n\t-- delete trailing empty ('-') date and time values from @dateParts\n\tWHILE EXISTS (SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts))\n\t\tDELETE FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts)\n\n\t-- get day component\n\tSELECT @year = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 1\n\tSELECT @month = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 2\n\tSELECT @day = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 3\n\n\t-- validate day component if year, month and day present\n\tIF(@year IS NOT NULL AND @month IS NOT NULL AND @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, ((@year - 1900) * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is Feb.\n\tELSE IF (@month='02')\n\t\tBEGIN\n\t\t\tIF (@day NOT BETWEEN 1 AND 29)\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is not Feb.\n\tELSE IF(@month IS NOT NULL and @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, (1900 * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\tEND\n\n\tCONTINUE_PROC:\n\n\t-- set datePart\n\tSELECT @datePart = COALESCE(@datePart + '', '') + FixedValue\n\tFROM @DateAndTimeParts\n\tWHERE id between 1 and 3\n\n\t-- set timePart\n\tSELECT @timePart = COALESCE(@timePart + '', '') + FixedValue\n\tFROM @DateAndTimeParts\n\tWHERE id between 4 and 6\n\n\tIF(@timePart IS NOT NULL)\n\t\tSELECT @OMCMISODateTime = @datePart + @timePart\n\tELSE\n\t\tSELECT @OMCMISODateTime = @datePart\n\t\n\tRETURN @OMCMISODateTime\n\n\tINVALID_DATE:\n\t\tRETURN NULL\n"
    },
    "c9ff18d9-0e8f-4530-b4e9-6fda1bfac9ab": {
        "Prototype": "OMCME2BDate (@Date VARCHAR(48)) RETURNS VARCHAR(10)",
        "Description": "Get date in E2B format",
        "Body": "\n\tDECLARE @year nvarchar(4), @month nvarchar(2), @day nvarchar(2)\n\tDECLARE @datePart nvarchar(10)\n\n\tDECLARE @DateAndTimeParts TABLE (id INT IDENTITY(1,1) PRIMARY KEY, FixedValue NVARCHAR(50), IsStopWord bit default 0)\n\tDECLARE @StopWords TABLE (stopWord nvarchar(10))\n\n\t-- populate whe stop words are populated at the time of function generation\n\tINSERT INTO @StopWords(stopWord) VALUES ('UNK'),('NA')\n\n\t-- make sure there are two / characters in the date\n\tWHILE (LEN(@date)-LEN(REPLACE(@date,'/','')) < 2)\n\t\tSET @date = @date + '/'\n\n\t-- populate @DateAndTimeParts with date and time parts\n\tDECLARE @DXML AS XML = CAST(('<i>' + REPLACE(@date, '/', '</i><i>') + '</i>') AS XML)\n\tINSERT INTO @DateAndTimeParts (IsStopWord, FixedValue)\n\tSELECT \n\t\tCASE \n\t\t\tWHEN N.value('.', 'VARCHAR(10)')='' THEN 1\n\t\t\tWHEN s.stopWord IS NULL THEN 0 \n\t\t\tELSE 1 END,\n\t\t\tISNULL(NULLIF(N.value('.', 'VARCHAR(10)'),''),(SELECT TOP 1 stopWord FROM @StopWords))\n\tFROM @DXML.nodes('i') as T(N) \n\tLEFT OUTER JOIN @StopWords s ON s.stopWord = N.value('.', 'VARCHAR(10)')\n\n\t-- validate date parts: Replace invalid parts with empty('-') values\n\tUPDATE @DateAndTimeParts \n\tSET FixedValue = \n\t\tCASE \n\t\t\tWHEN (id = 1) AND (LEN(FixedValue) != 4 OR ISNUMERIC(FixedValue) != 1) THEN\t\t\t\t\t\t\t\t\t   '-'  --year\n\t\t\tWHEN (id = 2) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 12) THEN '-'\t--month\n\t\t\tWHEN (id = 3) AND (LEN(FixedValue) != 2 OR ISNUMERIC(FixedValue) != 1 OR FixedValue not between 1 and 31) THEN '-'\t--day\n\t\t\tELSE FixedValue \n\t\tEND\n\n\t-- the date is invalid in case one part is empty('-') and it's not a stop word\n\tIF(EXISTS(SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND IsStopWord = 0))\n\t\tGOTO INVALID_DATE\n\n\t-- delete trailing empty ('-') date and time values from @dateParts\n\tWHILE EXISTS (SELECT 1 FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts))\n\t\tDELETE FROM @DateAndTimeParts WHERE FixedValue = '-' AND id = (select max(id) from @DateAndTimeParts)\n\n\t-- get day component\n\tSELECT @year = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 1\n\tSELECT @month = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 2\n\tSELECT @day = NULLIF(FixedValue,'-') FROM @DateAndTimeParts WHERE id = 3\n\n\t-- validate day component if year, month and day present\n\tIF(@year IS NOT NULL AND @month IS NOT NULL AND @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, ((@year - 1900) * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is Feb.\n\tELSE IF (@month='02')\n\t\tBEGIN\n\t\t\tIF (@day NOT BETWEEN 1 AND 29)\n\t\t\t\tGOTO INVALID_DATE\n\t\t\tELSE\n\t\t\t\tGOTO CONTINUE_PROC\n\t\tEND\n\t-- validate day component month and day present and month is not Feb.\n\tELSE IF(@month IS NOT NULL and @day IS NOT NULL)\n\t\tBEGIN\n\t\t\tIF(@day > DAY(DATEADD(month, (1900 * 12) + @month, -1)))\n\t\t\t\tGOTO INVALID_DATE\n\t\tEND\n\n\tCONTINUE_PROC:\n\n\t-- set datePart\n\tSELECT @datePart = COALESCE(@datePart + '', '') + FixedValue\n\tFROM @DateAndTimeParts\n\n\tRETURN @datePart\n\t\n\tINVALID_DATE:\n\t\tRETURN NULL\n"
    }
}